<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shopping.mall.dao.ProductMapper">
	<resultMap type="product" id="productResultMap">
		<result property="productNum" column="PRODUCT_NUM"/>
		<result property="role" column="ROLE"/>
		<result property="productID" column="PRODUCT_ID"/>
		<result property="cateCode" column="CATE_CODE"/>
		<result property="productTitle" column="PRODUCT_TITLE"/>
		<result property="productPrice" column="PRODUCT_PRICE"/>
		<result property="productQty" column="PRODUCT_QTY"/>
		<result property="productImg" column="PRODUCT_IMG"/>
		<result property="productContent" column="PRODUCT_CONTENT"/>
		<result property="productDate" column="PRODUCT_DATE"/>
		<result property="cateName" column="CATE_NAME"/>
		<result property="cateCodeRef" column="CATE_CODE_REF"/>
		<result property="rNum" column="rNum"/>
	</resultMap>
	
	<resultMap type="reply" id="replyResultMap">
		<result property="productNum" column="PRODUCT_NUM"/>
		<result property="userID" column="USER_ID"/>
		<result property="repNum" column="REP_NUM"/>
		<result property="repCon" column="REP_CON"/>
		<result property="repDate" column="REP_DATE"/>
	</resultMap>
	
	<resultMap type="cart" id="cartResultMap">
		<result property="cartNum" column="CART_NUM"/>
		<result property="userID" column="USER_ID"/>
		<result property="productNum" column="PRODUCT_NUM"/>
		<result property="productQty" column="PRODUCT_QTY"/>
		<result property="addDate" column="ADD_DATE"/>
		<result property="num" column="num"/>
		<result property="productTitle" column="PRODUCT_TITLE"/>
		<result property="productPrice" column="PRODUCT_PRICE"/>
		<result property="productImg" column="PRODUCT_IMG"/>
		<result property="productID" column="PRODUCT_ID"/>
	</resultMap>
	
	<resultMap type="order" id="orderResultMap">
		<result property="orderID" column="ORDER_ID"/>
		<result property="userID" column="USER_ID"/>
		<result property="orderATTN" column="ORDER_ATTN"/>
		<result property="address1" column="ADDRESS1"/>
		<result property="address2" column="ADDRESS2"/>
		<result property="address3" column="ADDRESS3"/>
		<result property="orderPhone" column="ORDER_PHONE"/>
		<result property="amount" column="AMOUNT"/>
		<result property="orderDate" column="ORDER_DATE"/>
		<result property="orderDetailsNum" column="ORDER_DETAILS_NUM"/>
		<result property="productNum" column="PRODUCT_NUM"/>
		<result property="productQty" column="PRODUCT_QTY"/>
		<result property="productInfo" column="PRODUCT_INFO"/>
		<result property="productTitle" column="PRODUCT_TITLE"/>
		<result property="productImg" column="PRODUCT_IMG"/>
		<result property="productPrice" column="PRODUCT_PRICE"/>
		<result property="productID" column="PRODUCT_ID"/>
	</resultMap>
	
	<!-- カテゴリー -->
	<select id="category" resultType="category">
		 select
		 	  level
		 	, cate_name as "cateName"
		 	, cate_code as "cateCode"
		 	, cate_code_ref as "cateCodeRef"
		 from sp_category
		    start with cate_code_ref is null connect by prior cate_code = cate_code_ref
	</select>
	
	<!-- 選択した上位製品のリスト -->
	<select id="productPshow" parameterType="hashMap" resultType="product" resultMap="productResultMap">
		select
			  product_num
			, product_ID
			, cate_code
	        , cate_code_ref
	        , cate_name
			, product_title
			, product_price
			, product_qty
			, product_img
			, product_content
	        , product_date
	        , role
			from (
				select 
	          p.product_num
			, p.product_ID
			, p.cate_code
	        , c.cate_code_ref
	        , c.cate_name
	        , p.product_title
			, p.product_price
	        , p.product_qty
			, p.product_img
			, p.product_content
	        , p.product_date
	        , p.role
        <choose>
			<when test="orderBy == 'desc'">
				, row_number() over(order by p.product_date desc) as rNum
			</when>
			
			<when test="orderBy == 'priceAsc'">
				, row_number() over(order by to_number(p.product_price)) as rNum
			</when>
			
			<when test="orderBy == 'priceDesc'">
				, row_number() over(order by to_number(p.product_price)desc) as rNum
			</when>
		</choose>
			from sp_product p
            inner join sp_category c
            on p.cate_code = c.cate_code
            where c.cate_code_ref = #{cateCodeRef}
			) sp_product
			where cate_code_ref = #{cateCodeRef} and rNum between #{criteria.rowStart} and #{criteria.rowEnd}
			<choose>
				<when test="orderBy == 'desc'">
					order by product_date desc
				</when>
				
				<when test="orderBy == 'priceAsc'">
					order by to_number(product_price)
				</when>
				
				<when test="orderBy == 'priceDesc'">
					order by to_number(product_price) desc
				</when>
			</choose>
	</select>

	<!-- 選択した下位製品のリスト -->
	<select id="productCshow" parameterType="hashMap" resultType="product" resultMap="productResultMap">
		select
			  product_num
			, product_ID
			, cate_code
	        , cate_code_ref
	        , cate_name
			, product_title
			, product_price
			, product_qty
			, product_img
			, product_content
	        , product_date
	        , role
			from (
				select 
	          p.product_num
			, p.product_ID
			, p.cate_code
	        , c.cate_code_ref
	        , c.cate_name
	        , p.product_title
			, p.product_price
	        , p.product_qty
			, p.product_img
			, p.product_content
	        , p.product_date
	        , p.role
		<choose>
			<when test="orderBy == 'desc'">
				, row_number() over(order by p.product_date desc) as rNum
			</when>
			
			<when test="orderBy == 'priceAsc'">
				, row_number() over(order by to_number(p.product_price)) as rNum
			</when>
			
			<when test="orderBy == 'priceDesc'">
				, row_number() over(order by to_number(p.product_price) desc) as rNum
			</when>
		</choose>
			from sp_product p
            inner join sp_category c
            on p.cate_code = c.cate_code
            where p.cate_code = #{cateCode }
			) sp_product
			where cate_code = #{cateCode } and rNum between #{criteria.rowStart} and #{criteria.rowEnd}
			<choose>
				<when test="orderBy == 'desc'">
					order by product_date desc
				</when>
				
				<when test="orderBy == 'priceAsc'">
					order by to_number(product_price)
				</when>
				
				<when test="orderBy == 'priceDesc'">
					order by to_number(product_price) desc
				</when>
			</choose>
	</select>
	
	<!-- 選択した上位製品の数 -->
	<select id="productPcount" parameterType="string" resultType="int">
		select
			count(p.cate_code)
		from 
			sp_product p
		inner join
			sp_category c
		on
			p.cate_code = c.cate_code
		where
			cate_code_ref = #{cateCodeRef}
	</select>
	
	<!-- 選択した下位製品の数 -->
	<select id="productCcount" parameterType="string" resultType="int">
		select
			count(cate_code)
		from 
			sp_product
		where
			cate_code = #{cateCode}
	</select>
	
	<!-- 商品検索 -->
	<select id="productSearch" parameterType="hashMap" resultType="product" resultMap="productResultMap">
		select
		  product_num
		, product_ID
		, cate_code
        , cate_code_ref
        , cate_name
		, product_title
		, product_price
		, product_qty
		, product_img
		, product_content
        , product_date
        , role
		from (
			select 
          p.product_num
		, p.product_ID
		, p.cate_code
        , c.cate_code_ref
        , c.cate_name
        , p.product_title
		, p.product_price
        , p.product_qty
		, p.product_img
		, p.product_content
        , p.product_date
        , p.role
		, row_number() over(order by p.product_date desc) as rNum
			from sp_product p
            inner join sp_category c
            on p.cate_code = c.cate_code
			<if test='searchType.equals("used")'>
			where (product_title like '%'||#{keyWord}||'%' or cate_name like '%'||#{keyWord}||'%') and role = '중고'
			</if>	
	
			<if test='searchType.equals("title")'>
				where (product_title like '%'||#{keyWord}||'%' or cate_name like '%'||#{keyWord}||'%')
			</if>
				
			<if test='searchType.equals("content")'>
				where product_content like '%'||#{keyWord}||'%'
			</if>
			
			<if test='searchType.equals("title_content")'>
				where (product_title like '%'||#{keyWord}||'%' or where product_content like '%'||#{keyWord}||'%' or cate_name like '%'||#{keyWord}||'%')
			</if>
			) sp_product
			where rNum between #{criteria.rowStart} and #{criteria.rowEnd}
			<choose>
				<when test="orderBy == 'desc'">
					order by product_date desc
				</when>
				
				<when test="orderBy == 'priceAsc'">
					order by to_number(product_price)
				</when>
				
				<when test="orderBy == 'priceDesc'">
					order by to_number(product_price) desc
				</when>
			</choose>
	</select>
	
	<!-- 検索した商品の数 -->
	<select id="searchCount" parameterType="hashMap" resultType="int">
		select
			count(product_num)
		from
			sp_product p
		inner join sp_category c
		on p.cate_code = c.cate_code
		
		<if test='searchType.equals("used")'>
			where (product_title like '%'||#{keyWord}||'%' or cate_name like '%'||#{keyWord}||'%') and role = '중고'
		</if>	
		
		<if test='searchType.equals("title")'>
			where (product_title like '%'||#{keyWord}||'%' or cate_name like '%'||#{keyWord}||'%')
		</if>
			
		<if test='searchType.equals("content")'>
			where product_content like '%'||#{keyWord}||'%'
		</if>
		
		<if test='searchType.equals("title_content")'>
			where product_title like '%'||#{keyWord}||'%' or where product_content like '%'||#{keyWord}||'%' or cate_name like '%'||#{keyWord}||'%'
		</if>
	</select>
	
	<!-- 商品の詳細情報　＆　修正する製品 -->
	<select id="productView" parameterType="int" resultType="product" resultMap="productResultMap">
			select
		  p.product_num
		, p.product_ID
		, p.cate_code
        , c.cate_code_ref
        , c.cate_name
        , p.product_title
		, p.product_price
        , p.product_qty
		, p.product_img
		, p.product_content
        , p.product_date
		from
			sp_product p
		inner join
			sp_category c
		on
			p.cate_code = c.cate_code
		where
			product_num = #{productNum }
	</select>
	
	<!-- カートに追加 -->
	<insert id="addCart">
		insert into
			sp_cart (
				  cart_num
				, user_ID
				, product_num
				, product_qty
				, product_ID
			) values (
				  sp_cart_seq.nextval
				, #{userID}
				, #{productNum}
				, #{productQty}
				, (select product_ID from sp_product where product_num = #{productNum})
			)
	</insert>
	
	<!-- コメント登録 -->
	<insert id="productReply">
		insert into sp_reply (
			  product_num
			, user_ID
			, rep_num
			, rep_con
		) values (
			  #{productNum}
			, #{userID}
			, sp_reply_seq.nextval
			, #{repCon}
		)
	</insert>
	
	<!-- コメントリスト -->
	<select id="replyList" resultType="reply" parameterType="hashMap" resultMap="replyResultMap">
		select
          product_num
		, user_ID
		, rep_num
		, rep_con
		, rep_date
		from (
            select
          product_num
		, user_ID
		, rep_num
		, rep_con
		, rep_date
        , row_number() over(order by rep_date) as rNum
             from
             sp_reply
             where product_num = #{productNum}
        )
		where
			product_num = #{productNum} and rNum between #{start} and #{cnt}
		order by rep_date
	</select>
	
	<!-- コメントの削除 -->
	<delete id="deleteReply">
		delete
			sp_reply
		where
			rep_num = #{repNum}
	</delete>
	
	<!-- コメント修正 -->
	<update id="modifyReply">
		update
			sp_reply
		set
			rep_con = #{repCon}
		where
			rep_num = #{repNum}
	</update>
	
	<!-- 登録された商品＆登録された商品のもっと見る -->
	<select id="myProduct" parameterType="hashMap" resultType="product" resultMap="productResultMap">
		select
          product_num
		, role
		, product_ID
		, cate_code
		, product_title
		, product_price
		, product_qty
		, product_img
		, product_content
        , product_date
		from (
            select
          product_num
		, role
		, product_ID
		, cate_code
		, product_title
		, product_price
		, product_qty
		, product_img
		, product_content
        , product_date
        , row_number() over(order by product_date) as rNum
            from
            	sp_product
            where product_ID = #{userID}
        )
		where
			product_ID = #{userID} and rNum between #{start} and #{cnt}
		order by product_date desc
	</select>
	
	<!-- 注文された製品のリスト -->
	<select id="orderComesList" resultType="order" parameterType="string" resultMap="orderResultMap">
		select 
			  distinct o.order_ID
			, o.user_ID
			, o.order_attn
			, o.address1
			, o.address2
			, o.address3
			, o.order_phone
			, o.amount
			, o.order_date
			, d.product_ID
			, o.order_date
			, d.product_info
	    from sp_order o
		    inner join sp_order_details d
		    on o.order_ID = d.order_ID
	    where 
	    	d.product_ID = #{userID}
	</select>
	
	<!-- 商品登録 -->
	<insert id="productUpload">
		insert into sp_product(
		  product_num
		, role
		, product_ID
		, cate_code
		, product_title
		, product_price
		, product_qty
		, product_img
		, product_content
		)
		values(
		  (sp_product_seq.nextval)
		, #{role}
		, #{productID}
		, #{cateCode}
		, #{productTitle}
		, #{productPrice}
		, #{productQty}
		, #{productImg}
		, #{productContent}
		)
	</insert>
	
	<!-- サムネイルとオリジナルイメージ登録 -->
	<insert id="productImg">
		insert into sp_product_img(
		  product_ID
		, product_num
		, original_img
		, thumbNail
		)
		values(
		  #{productID}
		, (sp_product_img_seq.nextval)
		, #{originalImg}
		, #{thumbNail}
		)
	</insert>
	
	<!-- 製品修正 -->
	<update id="productModify">
		update
			sp_product
		set
			  cate_code = #{cateCode}
			, product_title = #{productTitle}
			, product_price = #{productPrice}
			, product_qty = #{productQty}
			, product_img = #{productImg}
			, product_content = #{productContent}
		where
			product_num = #{productNum} 
	</update>
	
	<!-- 製品削除 -->
	<delete id="productDelete">
		delete
		from
			sp_product
		where
			product_num = #{productNum}
	</delete>
	
	<!-- カートリスト -->
	<select id="cartList" resultType="cart" parameterType="string" resultMap="cartResultMap">
		select
			  row_number() over(order by c.cart_num desc) as num
			, c.cart_num
			, c.user_ID
			, c.product_num
			, c.product_qty
			, c.add_date
			, p.product_title
			, p.product_price
			, p.product_img
			, p.product_ID
		from sp_cart c
			inner join sp_product p
				on c.product_num = p.product_num
		where c.user_ID = #{userID}
	</select>
	
	<!-- カートの製品削除 -->
	<delete id="deleteCart">
		delete
			sp_cart
		where
			cart_num = #{cartNum} and user_ID = #{userID}
	</delete>
	
	<!-- 注文の明細書 -->
	<insert id="orderInfo" parameterType="order">
		insert into sp_order(
			  order_ID
			, user_ID
			, order_ATTN
			, address1
			, address2
			, address3
			, order_phone
			, amount
		)values(
			  #{orderID}
			, #{userID}
			, #{orderATTN}
			, #{address1}
			, #{address2}
			, #{address3}
			, #{orderPhone}
			, #{amount}
		)
	</insert>
	
	<!-- 詳しい注文の内容 -->
	<insert id="orderDetailsInfo" parameterType="orderdetail">
		insert into sp_order_details(
			  order_details_num
			, order_ID
			, product_num
			, product_qty
			, product_ID
		)	  select 
			  sp_order_details_seq.nextval
			, #{orderID}
			, product_num
			, product_qty
			, product_ID
		from
			sp_cart
		where
			user_ID = #{userID}
	</insert>
	
	<!-- すべてのカートリストの製品削除 -->
	<delete id="cartAllDelete">
		delete
			sp_cart
		where
			user_ID = #{userID}
	</delete>
	
	<!-- 注文した製品 -->
	<select id="orderList" resultType="order" parameterType="string" resultMap="orderResultMap">
		select
			distinct o.order_ID
			, o.user_ID
			, o.order_attn
			, o.address1
			, o.address2
			, o.address3
			, o.order_phone
			, o.amount
			, o.order_date
			, o.order_date
			, d.product_info
		from sp_order o
		    inner join sp_order_details d
		    on o.order_ID = d.order_ID
		where
			user_ID = #{userID}
	</select>
	
	<!-- 返品した製品 -->
	<select id="refundOrderList" resultType="order" parameterType="hashMap" resultMap="orderResultMap">
		  select
			distinct o.order_ID
			, o.user_ID
			, o.order_attn
			, o.address1
			, o.address2
			, o.address3
			, o.order_phone
			, o.amount
			, o.order_date
			, d.product_ID
			, o.order_date
			, d.product_info
		from sp_order o
		    inner join sp_order_details d
		    on o.order_ID = d.order_ID
		where
			user_ID = #{userID} and product_info = #{productInfo}
	</select>
	
	<!-- 注文した製品の詳しい内容のリスト -->
	<select id="orderView" parameterType="hashMap" resultType="order" resultMap="orderResultMap">
		select
		      o.order_ID
		    , o.order_date
		    , p.product_title
		    , d.product_num
		    , d.product_qty
		    , p.product_img
		    , p.product_price
		    , d.product_info
		from sp_order o
		    inner join sp_order_details d
		        on o.order_ID = d.order_ID
		    inner join sp_product p
		        on d.product_num = p.product_num
		where o.order_ID = #{orderID} and d.product_info = #{productInfo}
	</select>
	
	<!-- orderViewからチェックした製品の返品要請 -->
	<update id="refundPlz" parameterType="hashMap">
		update
			sp_order_details
		set
			product_info = #{productInfo}
		where
			product_num = #{productNum} and order_ID = #{orderID}
	</update>
	
	<!-- 販売者：明細書の配送の状態に合わせて製品を持ってくる -->
	<select id="orderDelivery" resultType="order" parameterType="hashMap" resultMap="orderResultMap">
		select
			  d.product_num
			, p.product_img
			, d.product_qty
	        , d.product_id
	        , p.product_title
	        , p.product_price
	        , o.amount
	        , o.order_ID
	        , d.product_info
		from sp_order_details d
        	inner join sp_order o
        	on o.order_ID = d.order_ID
			inner join sp_product p
        	on d.product_num = p.product_num
        	<choose>
				<when test="productInfo == '배송준비' or productInfo == '배송 중'">
					where d.product_ID = #{userID} and o.order_ID = #{orderID} and (d.product_info = '배송준비' or d.product_info = '배송 중')
				</when>
				
				<when test="productInfo == '배송완료'">
					where d.product_ID = #{userID} and o.order_ID = #{orderID} and d.product_info = #{productInfo}
				</when>
				
				<when test="productInfo == '환불요청'">
					where d.product_ID = #{userID} and o.order_ID = #{orderID} and d.product_info = #{productInfo}
				</when>
				
				<when test="productInfo == '환불완료'">
					where d.product_ID = #{userID} and o.order_ID = #{orderID} and d.product_info = #{productInfo}
				</when>
			</choose>
	</select>
	
	
	<!-- 販売者：配送の状態を決める -->
	<update id="deliveryInfo" parameterType="hashMap">
		update
			sp_order_details
		set
			product_info = #{productInfo}
		where
			order_ID = #{orderID} and product_ID = #{userID}
	</update>
	
	<!-- 配送が完了すると注文が入った数分だけ製品から抜く -->
	<update id="productDown">
		update
			sp_product
		set
			product_qty = product_qty - #{productQty}
		where
			product_num = #{productNum}
	</update>
	
	<!-- 返品完了すると製品の数を返品された数分だけ増加 -->
	<update id="refund" parameterType="hashMap">
		update
			sp_product
		set
			product_qty = product_qty + #{productQty}
		where
			product_num = #{productNum}
	</update>
	
	<!-- 当日入った一般製品をホームページに表示するメソッド -->
	<select id="todayProduct" parameterType="string" resultType="product" resultMap="productResultMap">
		   select
		  product_num
		, product_ID
		, cate_code
        , cate_code_ref
        , cate_name
		, product_title
		, product_price
		, product_qty
		, product_img
		, product_content
        , product_date
        , role
		from (
			select 
          p.product_num
		, p.product_ID
		, p.cate_code
        , c.cate_code_ref
        , c.cate_name
        , p.product_title
		, p.product_price
        , p.product_qty
		, p.product_img
		, p.product_content
        , p.product_date
        , p.role
		, row_number() over(order by p.product_date desc) as rNum
			from sp_product p
            inner join sp_category c
            on p.cate_code = c.cate_code
            where role = '기업'
			) sp_product
           where to_char(product_date, 'YY/MM/DD') = #{date} and rNum between 1 and 4
	</select>
	
	<!-- 当日入った中古品をホームページに表示するメソッド -->
	<select id="todayUsedProduct" parameterType="string" resultType="product" resultMap="productResultMap">
	    select
		  product_num
		, product_ID
		, cate_code
        , cate_code_ref
        , cate_name
		, product_title
		, product_price
		, product_qty
		, product_img
		, product_content
        , product_date
        , role
		from (
			select 
          p.product_num
		, p.product_ID
		, p.cate_code
        , c.cate_code_ref
        , c.cate_name
        , p.product_title
		, p.product_price
        , p.product_qty
		, p.product_img
		, p.product_content
        , p.product_date
        , p.role
		, row_number() over(order by p.product_date desc) as rNum
			from sp_product p
            inner join sp_category c
            on p.cate_code = c.cate_code
            where role = '중고'
			) sp_product
           where to_char(product_date, 'YY/MM/DD') = #{date} and rNum between 1 and 4
	</select>
	
	<select id="productShowThum" parameterType="int" resultType="thum">
		select
			*
		from
			sp_product_img
		where
			product_num = #{productNum }
	</select>
	
	<update id="productImgModify">
		update
			sp_product_img
		set
			  original_img = #{originalImg}
			, thumbNail = #{thumbNail}
		where
			product_num = #{productNum}	
	</update>
</mapper>